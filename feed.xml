<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://rknuus.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rknuus.github.io/" rel="alternate" type="text/html" /><updated>2021-02-21T19:31:54+00:00</updated><id>https://rknuus.github.io/feed.xml</id><title type="html">AQ - Agility &amp;amp; Quality</title><subtitle>Agile development is awesome. Except when it's not. And quality is tricky, particularly in software development. This blog covers both topics, sometimes at the same time. Focusing on the positive side I won't rant a lot. Code is mainly in C++, Python, and occasionally Ruby. The articles are inspired by books, talks, and podcasts.</subtitle><author><name>rknuus</name></author><entry><title type="html">Treat CI/CD pipelines not just as code</title><link href="https://rknuus.github.io/blog/2021/02/21/treat-pipelines-not-just-as-code" rel="alternate" type="text/html" title="Treat CI/CD pipelines not just as code" /><published>2021-02-21T00:00:00+00:00</published><updated>2021-02-21T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2021/02/21/treat-pipelines-not-just-as-code</id><content type="html" xml:base="https://rknuus.github.io/blog/2021/02/21/treat-pipelines-not-just-as-code">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a larger organization I recently observed several teams migrating automated build infrastructure to CI/CD pipelines using &lt;a href=&quot;https://www.jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; 2. But for reasons I might not fully understand, the pipeline code turned out to be complicated, non-reusable, and was tested manually. In short, it reminded me of software development practices of the past.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Human%20Evolution_796941.svg&quot; alt=&quot;noun Human Evolution 796941&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Certainly, one of the reasons is the &lt;a href=&quot;https://medium.com/the-devops-corner/the-evolution-of-ci-cd-763df723f05b&quot;&gt;growing complexity&lt;/a&gt; of CI/CD infrastructure requiring ever more skills. That&amp;#8217;s why it might make sense to delegate complexity to &lt;a href=&quot;https://medium.com/the-devops-corner/should-you-build-your-own-ci-server-9439c77bf038&quot;&gt;specialists&lt;/a&gt;. But perhaps another cause is sloppy engineering. As if software engineers still treat pipelines like trivial build scripts, not fully acknowledging the consequences of &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot;&gt;infrastructure as code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_quality_1725381.svg&quot; alt=&quot;noun quality 1725381&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So &lt;em&gt;if&lt;/em&gt; you opt to maintain your own CI/CD infrastructure I&amp;#8217;m arguing to treat pipelines not just as code, but as production code. This means:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design pipelines instead of making them up ad-hoc. Example: cleanly separate different configuration scopes component-specific&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; (like installing component-specific build dependencies), team-specific (like where to publish build artifacts), and shared (e.g. if the entire organization uses the same static code analysis infrastructure).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If useful, share common functionality in &lt;a href=&quot;https://hackernoon.com/simplifying-jenkinsfiles-c97cfee13f83&quot;&gt;modules&lt;/a&gt; and building blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep pipelines simple e.g. by following the paradigm &lt;a href=&quot;https://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;convention over configuration&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cover essential complexity by &lt;a href=&quot;https://github.com/jenkinsci/JenkinsPipelineUnit&quot;&gt;tests&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Simplicity might feel like a challenge. A sketch of an elegant pipeline design was posted on &lt;a href=&quot;https://www.reddit.com/r/devops/comments/aa4qi7/simplify_your_jenkinsfiles/eedkqxl/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&quot;&gt;reddit&lt;/a&gt;. A more tangible solution for modular &lt;a href=&quot;https://www.jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; pipelines is &lt;a href=&quot;https://github.com/griddynamics/mpl&quot;&gt;MPL&lt;/a&gt;. It supports reuse of pipelines and building blocks, overriding general building blocks by specialized ones, and it demonstrates how to test pipelines based on &lt;a href=&quot;https://github.com/jenkinsci/JenkinsPipelineUnit&quot;&gt;JenkinsPipelineUnit&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. assuming that one team maintains multiple components
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">In a larger organization I recently observed several teams migrating automated build infrastructure to CI/CD pipelines using Jenkins 2. But for reasons I might not fully understand, the pipeline code turned out to be complicated, non-reusable, and was tested manually. In short, it reminded me of software development practices of the past.</summary></entry><entry><title type="html">Goal setting approach in the hands of clueless leaders</title><link href="https://rknuus.github.io/blog/2021/02/20/goal-setting-and-clueless-leaders" rel="alternate" type="text/html" title="Goal setting approach in the hands of clueless leaders" /><published>2021-02-20T00:00:00+00:00</published><updated>2021-02-20T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2021/02/20/goal-setting-and-clueless-leaders</id><content type="html" xml:base="https://rknuus.github.io/blog/2021/02/20/goal-setting-and-clueless-leaders">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What&amp;#8217;s the point of a goal setting approach like &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; if the so-called leaders don&amp;#8217;t have a vision they want the organization to achieve?&lt;/p&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">What&amp;#8217;s the point of a goal setting approach like OKRs if the so-called leaders don&amp;#8217;t have a vision they want the organization to achieve?</summary></entry><entry><title type="html">Isolate volatility and stability</title><link href="https://rknuus.github.io/blog/2020/08/30/isolate-volatility-and-stability" rel="alternate" type="text/html" title="Isolate volatility and stability" /><published>2020-08-30T00:00:00+00:00</published><updated>2020-08-30T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/08/30/isolate-volatility-and-stability</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/08/30/isolate-volatility-and-stability">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As quoted &lt;a href=&quot;../../../2020/07/05/functional-decomposition-is-the-root-of-all-evil.html&quot;&gt;before&lt;/a&gt; functional decomposition usually leads to maintenance issues (&lt;a href=&quot;#Loe2020&quot;&gt;[Loe2020]&lt;/a&gt;). So what&amp;#8217;s Juval Löwy&amp;#8217;s suggestion how to decompose an application, then? He argues that decomposition should encapsulate &quot;areas of potential change&quot; (volatility) to reduce ripple effects of volatility-driven changes on other components. An idea already published in 1972 by David Parnas (&lt;a href=&quot;#Parn1972&quot;&gt;[Parn1972]&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example: If you would decompose the human body in functional manner you might well end up with components for running, blogging, sleeping etc. In reality body functions can be seen as services which are consumed in various conditions. E.g. your heart pumps blood. It takes care of related volatilities like your activity level, your health condition etc. So the human body hides complexity behind reasonable abstractions (&lt;a href=&quot;#LeM2012&quot;&gt;[LeM2012]&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Löwy observes that changing requirements generate huge costs in case of functional decomposition because multiple components tend to be affected. Volatility-based decomposition doesn&amp;#8217;t promise to constrain &lt;em&gt;all&lt;/em&gt; requirement changes to a single component, but it increases your chances. That&amp;#8217;s why the author believes it&amp;#8217;s your best shot. This sounds plausible for business applications, but might not apply equally well to other domains (e.g. typically affects multiple components unless you bundle logic into the UI component).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interestingly the authors of &lt;a href=&quot;#LeM2012&quot;&gt;Managing Complexity of Information Systems&lt;/a&gt; tackle the problem from the other end and argue that the best approach to cope with changing requirements is to &quot;identify things that do &lt;em&gt;not&lt;/em&gt; change&quot; (&lt;a href=&quot;#LeM2012&quot;&gt;[LeM2012]&lt;/a&gt;). This leads me to the conclusion that it probably doesn&amp;#8217;t matter which approach you take, as long as you focus on separating volatile from stable concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;Loe2020&quot;&gt;&lt;/a&gt;[Loe2020]: &lt;a href=&quot;https://rightingsoftware.org/&quot;&gt;Righting Software&lt;/a&gt; by Juval Löwy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;Parn1972&quot;&gt;&lt;/a&gt;[Parn1972]: On the Criteria to Be Used in Decomposing Systems into Modules by David Parnas, Communications of the ACM 15, no. 12 (1972)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;LeM2012&quot;&gt;&lt;/a&gt;[LeM2012]: Managing Complexity of Information Systems by Pirmin Lemberger and Médéric Morel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">As quoted before functional decomposition usually leads to maintenance issues ([Loe2020]). So what&amp;#8217;s Juval Löwy&amp;#8217;s suggestion how to decompose an application, then? He argues that decomposition should encapsulate &quot;areas of potential change&quot; (volatility) to reduce ripple effects of volatility-driven changes on other components. An idea already published in 1972 by David Parnas ([Parn1972]).</summary></entry><entry><title type="html">Functional decomposition is the root of all evil</title><link href="https://rknuus.github.io/blog/2020/07/05/functional-decomposition-is-the-root-of-all-evil" rel="alternate" type="text/html" title="Functional decomposition is the root of all evil" /><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/07/05/functional-decomposition-is-the-root-of-all-evil</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/07/05/functional-decomposition-is-the-root-of-all-evil">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;#SER407&quot;&gt;SE Radio Episode 407&lt;/a&gt; Juval Löwy made some bold statements. So I got curious, read the first part of his book &lt;a href=&quot;#Loe2020&quot;&gt;Righting Software&lt;/a&gt;, and will publish the aspects I found most interesting. This is the first of a series of articles about his ideas and some reflections of mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Reading_38463.svg&quot; alt=&quot;noun Reading 38463&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;His first major thesis is that functional decomposition is the mother of all software maintainability issues. A position backed by the &lt;a href=&quot;#SEI&quot;&gt;Software Engineering Institute&lt;/a&gt;. The reasoning is that - by tightly coupling the structure to requirements - future requirement changes inevitably require structural changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_tired_1749591.svg&quot; alt=&quot;noun tired 1749591&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Indeed in classical project management the goal is to finish the development project. But even if the project completes in time, in budget, and with the expected functional scope, maintainability tends to be an afterthought. Which, according to &lt;a href=&quot;#WMW2020&quot;&gt;Software Engineering at Google&lt;/a&gt; would be mere software development, but not software engineering. Because &quot;software engineering is software development integrated over time.&quot; (&lt;a href=&quot;#WMW2020&quot;&gt;[WMW2020]&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_engineer_1706578.svg&quot; alt=&quot;noun engineer 1706578&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile approaches focus on delivering value early and often. Still, maintainability is not guaranteed to be a concern. &lt;a href=&quot;#Jef2015&quot;&gt;The Nature of Software Development&lt;/a&gt; suggests that for each increment the software should be well-designed (see &lt;a href=&quot;../../../2019/11/26/quintessence-of-software-development.html&quot;&gt;Quintessence of (agile) software development&lt;/a&gt;), but that&amp;#8217;s quite hand-wavy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_modern%20art_875730.svg&quot; alt=&quot;noun modern art 875730&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;../../../2020/03/01/a-software-quality-model.html&quot;&gt;A Software Quality Model&lt;/a&gt; I suggested to link concrete quality attributes of the software system to &quot;fitness for change&quot;. But this still doesn&amp;#8217;t answer how to decompose your software. Curious about the solution suggested by Juwal Löwy? &lt;a href=&quot;../../../2020/08/30/isolate-volatility-and-stability.html&quot;&gt;Read on&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;Loe2020&quot;&gt;&lt;/a&gt;[Loe2020]: &lt;a href=&quot;https://rightingsoftware.org/&quot;&gt;Righting Software&lt;/a&gt; by Juval Löwy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;WMW2020&quot;&gt;&lt;/a&gt;[WMW2020]: &lt;a href=&quot;https://www.amazon.com/Software-Engineering-Google-Lessons-Programming/dp/1492082791&quot;&gt;Software Engineering at Google: Lessons Learned from Programming Over Time&lt;/a&gt; by Titus Winters, Tom Manshreck, and Hyrum Wright&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;Jef2015&quot;&gt;&lt;/a&gt;[Jef2015]: &lt;a href=&quot;https://pragprog.com/book/rjnsd/the-nature-of-software-development&quot;&gt;The Nature of Software Development&lt;/a&gt; by Ron Jeffries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;SER407&quot;&gt;&lt;/a&gt;[SER407]: Software Engineering Radio &lt;a href=&quot;https://www.se-radio.net/2020/04/episode-407-juval-lowy-on-righting-software/&quot;&gt;Episode 407: Juval Löwy on Righting Software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;SER396&quot;&gt;&lt;/a&gt;[SER396]: Software Engineering Radio &lt;a href=&quot;https://www.se-radio.net/2020/01/episode-396-barry-oreilly-on-antifragile-architecture/r&quot;&gt;Episode 396: Barry O’Reilly on Antifragile Architecture&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;SEI&quot;&gt;&lt;/a&gt;[SEI]: &lt;a href=&quot;https://www.sei.cmu.edu/&quot;&gt;Software Engineering Institute&lt;/a&gt; of the Carnegie Mellon University&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock changehistory&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;change history:&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;improve wording and add link to next article of the series, 29-Jul-2020&lt;br&gt;
initial version, 05-Jul-2020&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">In SE Radio Episode 407 Juval Löwy made some bold statements. So I got curious, read the first part of his book Righting Software, and will publish the aspects I found most interesting. This is the first of a series of articles about his ideas and some reflections of mine.</summary></entry><entry><title type="html">Feature teams revisited: failure modes of feature teams</title><link href="https://rknuus.github.io/blog/2020/06/11/feature-teams-revisited-failure-modes-of-feature-teams" rel="alternate" type="text/html" title="Feature teams revisited: failure modes of feature teams" /><published>2020-06-11T00:00:00+00:00</published><updated>2020-06-11T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/06/11/feature-teams-revisited-failure-modes-of-feature-teams</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/06/11/feature-teams-revisited-failure-modes-of-feature-teams">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;../../../2019/11/30/feature-teams-are-cheaper-and-faster.html&quot;&gt;Feature teams are cheaper and faster&lt;/a&gt; I made a strong case for feature teams. After taking an &lt;a href=&quot;https://www.gotoacademy.nl/collections/architecture-with-agility-kevlin-henney&quot;&gt;Architecture with Agility masterclass&lt;/a&gt; hosted by Kevlin Henney I revised my view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The arguments presented &lt;a href=&quot;../../../2019/11/30/feature-teams-are-cheaper-and-faster.html&quot;&gt;earlier&lt;/a&gt; are based on the failure mode of component teams: that delays can propagate through the organization and that consequently the need for management grows superlinearly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Accident_1920700.svg&quot; alt=&quot;noun Accident 1920700&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But feature teams are not a &lt;a href=&quot;https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.117.315&quot;&gt;silver bullet&lt;/a&gt;. Feature teams have a failure mode, too. Feature teams might require a broad set of skills, which can be overwhelming and lead to low throughput or poor quality because a generalist can&amp;#8217;t dedicate the same amount of time to a particular skill as a specialist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Silver-Bullet_314511.svg&quot; alt=&quot;noun Silver Bullet 314511&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So it depends on your particular context whether a component team or a feature team makes more sense. The &lt;a href=&quot;https://www.gotoacademy.nl/collections/architecture-with-agility-kevlin-henney&quot;&gt;masterclass&lt;/a&gt; nicely demonstrated why it is crucial to design your organization &lt;a href=&quot;http://www.melconway.com/Home/pdf/committees.pdf&quot;&gt;&quot;according to the need for communication&quot;&lt;/a&gt; (Melvin Conway). Some organization design criteria could be:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. selection of criteria pro/contra feature teams&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;criterion&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;favors&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;features require common skillset&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;feature team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;features require broad skillset&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;component team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;features require deep domain knowledge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;feature team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;features require deep component knowledge&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;component team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;high need for communication about feature&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;feature team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;high need for communication about skill&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;component team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;faster business value delivery&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;feature team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;higher code quality&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;component team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;minimize WIP, handovers, and delays&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;feature team&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This relativization should be considered when reading Ron Jeffries' book &lt;a href=&quot;https://pragprog.com/book/rjnsd/the-nature-of-software-development&quot;&gt;The Nature of Software Development&lt;/a&gt;, because he focuses on the strengths of feature team and the weaknesses of component teams, but doesn&amp;#8217;t cover the full picture.&lt;/p&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">In Feature teams are cheaper and faster I made a strong case for feature teams. After taking an Architecture with Agility masterclass hosted by Kevlin Henney I revised my view.</summary></entry><entry><title type="html">Searching a needle in a log file</title><link href="https://rknuus.github.io/blog/2020/05/01/searching-a-needle-in-a-log-file" rel="alternate" type="text/html" title="Searching a needle in a log file" /><published>2020-05-01T00:00:00+00:00</published><updated>2020-05-01T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/05/01/searching-a-needle-in-a-log-file</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/05/01/searching-a-needle-in-a-log-file">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you receive a defect report with a log file and instructions how to reproduce the issue on a customer system, you take a look at the log file first. If the log file is big searching manually doesn&amp;#8217;t cut the mustard. For large enough log files even a decent log file viewer might not be good enough, e.g. if you need to identify lines with identical message IDs. So what to do about it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Python&amp;#8217;s &lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/&quot;&gt;generator expressions&lt;/a&gt; could be a tool worth adding to your belt. In a nutshell a generator expression is a way to iterate over lazily-evaluated data and to apply map-reduce operations. Let&amp;#8217;s just have a look at an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;f&lt;/span&gt;(line):
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; line&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;replace(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;)

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;g&lt;/span&gt;(line):
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; line[::&lt;span style=&quot;color: #666666&quot;&gt;-1&lt;/span&gt;]  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# reverses the line&lt;/span&gt;

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: #008000&quot;&gt;open&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;some logfile&amp;#39;&lt;/span&gt;) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;as&lt;/span&gt; logfile:
  lines &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (line &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; logfile)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;#&lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
  reduced_lines &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (line &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; lines &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; line)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;#&lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
  mapped_lines &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (f(line) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; reduced_lines)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;#&lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
  lines &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; (g(line) &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; mapped_lines &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;non&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; line)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;#&lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
  &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;for&lt;/span&gt; line &lt;span style=&quot;color: #AA22FF; font-weight: bold&quot;&gt;in&lt;/span&gt; lines:  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;#&lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
    &lt;span style=&quot;color: #008000&quot;&gt;print&lt;/span&gt;(line)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The basic structure is like a slightly rearranged and compacted for-loop:&lt;br&gt;
&lt;code&gt;(&amp;lt;iterator-based return value&amp;gt; for &amp;lt;iterator&amp;gt; in &amp;lt;range&amp;gt;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;To reduce simply add &lt;code&gt;if &amp;lt;condition&amp;gt;&lt;/code&gt; after the for-loop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Mapping is done by modifying the &lt;code&gt;&amp;lt;iterator-based return value&amp;gt;&lt;/code&gt;, e.g. by calling a function on it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Map and reduce combined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;You can iterate once over a generator expression&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/&quot;&gt;Generator expressions&lt;/a&gt; can be chained, i.e. a &lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/&quot;&gt;generator expression&lt;/a&gt; can be fed with elements of another &lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/&quot;&gt;generator expression&lt;/a&gt;. Thanks to lazy evaluation only the currently used elements must be loaded to memory. That&amp;#8217;s why this approach works reasonably fast for large files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When applying &lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/&quot;&gt;generator expressions&lt;/a&gt; on log files you can extract specific information and&amp;#8201;&amp;#8212;&amp;#8201;for instance&amp;#8201;&amp;#8212;&amp;#8201;generate a &lt;a href=&quot;https://plantuml.com&quot;&gt;diagram&lt;/a&gt; to visualize matching lines with identical message IDs. Two caveats I&amp;#8217;d like to point out: You can consume a generator expression once and only once. And you need to pick up &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To learn more about generator expressions check out David Beazley&amp;#8217;s excellent &lt;a href=&quot;http://www.dabeaz.com/generators/&quot;&gt;Generator Tricks&lt;/a&gt;. And instead of reinventing the functional wheel check out the &lt;a href=&quot;https://docs.python.org/3/library/itertools.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock changehistory&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;change history:&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;improve case for generator expressions, 04-May-2020&lt;br&gt;
initial version, 01-May-2020&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="debugging" /><summary type="html">If you receive a defect report with a log file and instructions how to reproduce the issue on a customer system, you take a look at the log file first. If the log file is big searching manually doesn&amp;#8217;t cut the mustard. For large enough log files even a decent log file viewer might not be good enough, e.g. if you need to identify lines with identical message IDs. So what to do about it?</summary></entry><entry><title type="html">Up and GoogleTesting in Minutes</title><link href="https://rknuus.github.io/blog/2020/04/15/up-and-google-testing-in-minutes" rel="alternate" type="text/html" title="Up and GoogleTesting in Minutes" /><published>2020-04-15T00:00:00+00:00</published><updated>2020-04-15T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/04/15/up-and-google-testing-in-minutes</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/04/15/up-and-google-testing-in-minutes">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Setting up testing infrastructure for new C++ projects without aid of IDEs can be a nuisance. This article presents an approach which should get you started within minutes. All you need is a recent CMake version: 3.14 or newer will work&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;. For demonstration purposes we will use &lt;a href=&quot;https://github.com/google/googletest&quot;&gt;GoogleTest&lt;/a&gt; version 1.10. Of course, the approach also works for other CMake-ready testing frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Append the following lines to your project&amp;#8217;s root &lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;CMakeLists.txt&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;cmake&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;CMAKE_CXX_STANDARD&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;11&lt;/span&gt;)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

&lt;span style=&quot;color: #008000&quot;&gt;include&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;CTest&lt;/span&gt;)
&lt;span style=&quot;color: #008000&quot;&gt;enable_testing&lt;/span&gt;()
&lt;span style=&quot;color: #008000&quot;&gt;add_subdirectory&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;test&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;GoogleTest 1.10 requires at least C++11.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now create a folder &lt;code&gt;test&lt;/code&gt; and a file &lt;code&gt;test/CMakeLists.txt&lt;/code&gt; containing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;test/CMakeLists.txt&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;cmake&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 1&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 2&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 3&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 4&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 5&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 6&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 7&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 8&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt; 9&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;10&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;11&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;12&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;13&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;14&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;15&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;16&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;17&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;18&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;19&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;20&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;21&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;22&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;23&lt;/span&gt;
&lt;span style=&quot;color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px;&quot;&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #008000&quot;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;VERSION&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;3.14.0&lt;/span&gt;)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

&lt;span style=&quot;color: #008000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;TEST_EXECUTABLE&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;your-test&lt;/span&gt;)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span style=&quot;color: #008000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;TEST_NAME&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;test-name&lt;/span&gt;)
&lt;span style=&quot;color: #008000&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;UNIT_UNDER_TEST_INCLUDE_DIR&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;CMAKE_SOURCE_DIR&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;/include&lt;/span&gt;)

&lt;span style=&quot;color: #008000&quot;&gt;include&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;FetchContent&lt;/span&gt;)
&lt;span style=&quot;color: #008000&quot;&gt;FetchContent_Declare&lt;/span&gt;(
  &lt;span style=&quot;color: #BA2121&quot;&gt;googletest&lt;/span&gt;
  &lt;span style=&quot;color: #BA2121&quot;&gt;GIT_REPOSITORY&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;https://github.com/google/googletest.git&lt;/span&gt;
  &lt;span style=&quot;color: #BA2121&quot;&gt;GIT_TAG&lt;/span&gt;        &lt;span style=&quot;color: #BA2121&quot;&gt;release-1.10.0&lt;/span&gt;
)
&lt;span style=&quot;color: #008000&quot;&gt;FetchContent_MakeAvailable&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;googletest&lt;/span&gt;)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;

&lt;span style=&quot;color: #008000&quot;&gt;add_executable&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;TEST_EXECUTABLE&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;Foo.cpp&lt;/span&gt;)  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
&lt;span style=&quot;color: #008000&quot;&gt;target_link_libraries&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;TEST_EXECUTABLE&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #BA2121&quot;&gt;gmock&lt;/span&gt;  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
  &lt;span style=&quot;color: #BA2121&quot;&gt;gmock_main&lt;/span&gt;
)
&lt;span style=&quot;color: #008000&quot;&gt;target_include_directories&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;TEST_EXECUTABLE&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;PUBLIC&lt;/span&gt;
  &lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;UNIT_UNDER_TEST_INCLUDE_DIR&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;  &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
)

&lt;span style=&quot;color: #008000&quot;&gt;add_test&lt;/span&gt;(&lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;TEST_NAME&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;${&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;TEST_EXECUTABLE&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Ensure minimum version supporting this approach.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Variables to centralize all customization points and simplify this article.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add GoogleTest to the main build, so that the main build can use GoogleTest targets. GoogleTest sources are fetched to your main build directory, keeping your main source directory clean.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Either add the required sources of the unit-under-test or provide the &lt;a href=&quot;https://stackoverflow.com/questions/41883841/confusion-about-unit-tests-googletest-and-projects-folder-files/41939662#41939662&quot;&gt;production code as library&lt;/a&gt; and add the production library to line 16.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/google/googlemock&quot;&gt;GoogleMock was absorbed into GoogleTest&lt;/a&gt; but confusingly contains GoogleTest.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Allow includes of the unit-under-test.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then create a file &lt;code&gt;test/Foo.cpp&lt;/code&gt; with a minimal, failing test to demonstrate that the testing infrastructure works:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;test/Foo.cpp&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot; style=&quot;background: #f8f8f8;&quot;&gt;&lt;code data-lang=&quot;cpp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&quot;color: #BC7A00&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;gmock/gmock.h&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BC7A00&quot;&gt;&lt;/span&gt;
&lt;span style=&quot;color: #BC7A00&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;&amp;lt;gtest/gtest.h&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #BC7A00&quot;&gt;&lt;/span&gt;

TEST(Foo, Bar) {
  ASSERT_THAT(&lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;testing&lt;span style=&quot;color: #666666&quot;&gt;::&lt;/span&gt;Eq(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally you are ready to &lt;code&gt;mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; cmake -G Ninja ..&lt;/code&gt; and to call &lt;code&gt;ninja &amp;amp;&amp;amp; ctest&lt;/code&gt; whenever you fancy.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. see &lt;a href=&quot;https://cmake.org/cmake/help/v3.14/module/FetchContent.html&quot;&gt;CMake&amp;#8217;s documentation&lt;/a&gt; how to support version 3.11
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="c++" /><summary type="html">Setting up testing infrastructure for new C++ projects without aid of IDEs can be a nuisance. This article presents an approach which should get you started within minutes. All you need is a recent CMake version: 3.14 or newer will work[1]. For demonstration purposes we will use GoogleTest version 1.10. Of course, the approach also works for other CMake-ready testing frameworks. 1. see CMake&amp;#8217;s documentation how to support version 3.11</summary></entry><entry><title type="html">OKR elaboration workflow</title><link href="https://rknuus.github.io/blog/2020/04/01/okr-elaboration-workflow" rel="alternate" type="text/html" title="OKR elaboration workflow" /><published>2020-04-01T00:00:00+00:00</published><updated>2020-04-01T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/04/01/okr-elaboration-workflow</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/04/01/okr-elaboration-workflow">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To define relevant OKRs you first need to identify areas with significant potential (see &lt;a href=&quot;https://www.perdoo.com/resources/okr-ebook/&quot;&gt;How to write great OKRs&lt;/a&gt; or &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;Introducing OKRs&lt;/a&gt;). Before hosting an OKR workshop reserve time to collect and interpret data. The more long-term the OKRs, the more preparation time makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Data_2952575.svg&quot; alt=&quot;noun Data 2952575&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To systematically gather data first brainstorm input sources, then brainstorm potentially relevant input. &lt;a href=&quot;https://www.perdoo.com/resources/okr-ebook/&quot;&gt;How to write great OKRs&lt;/a&gt; lists several input sources. Among others:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the future (e.g. parent organization OKRs or your organization&amp;#8217;s mission &amp;amp; vision)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the past (e.g. previous OKRs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pain points (e.g. KPIs indicating significant problems in certain areas or the opinions of your organization&amp;#8217;s members)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consolidate and identify the top items. Prepare a couple of &quot;goal brainstorming canvas&quot; posters (below) and put each item in the &quot;mission &amp;amp; vision / parent OKR&quot; box of one poster. It helps a lot to see them while brainstorming OKRs. Start the OKR workshop by presenting these items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Brainstorm_2718986.svg&quot; alt=&quot;noun Brainstorm 2718986&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then brainstorm goal and measurement candidates. The canvas below helps to structure the brainstorming process. It is inspired by Yousef Ghandour&amp;#8217;s &lt;a href=&quot;https://medium.com/yousefghandour/okrs-brainstorming-canvas-c1b6e5f650a7&quot;&gt;OKRs Brainstorming Canvas&lt;/a&gt;. The lanes on the canvas below should help to group related items across columns and the canvas space is optimized for brainstorming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://docs.google.com/presentation/d/13ezeFDPx3rzyHyBML9E3AeZfXZYIaguobjtvKdipz1s&quot;&gt;&lt;img src=&quot;/images/post-images/goal%20brainstorming%20canvas.svg&quot; alt=&quot;goal brainstorming canvas&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before asking your organization to review the OKRs wordsmith the brainstorming outcome and apply a checklist (e.g. &lt;a href=&quot;../../../2020/03/22/practical-okr-tips.html&quot;&gt;my organization&amp;#8217;s checklist&lt;/a&gt;) to improve the OKR quality. Then make them available to your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_protester_2812080.svg&quot; alt=&quot;noun protester 2812080&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use the following format to present our OKRs. Adding some extra information like the motivation and the specification how to measure helps. Particularly while the organization is still building up experience with OKRs.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. recommended OKR presentation format&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Objective&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Reason / Motivation&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Key Results&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;How to measure?&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Next steps&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;O1.1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;parent OKR O1&lt;br&gt;
because: reasons&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;KR1.1.1&lt;br&gt;
&lt;br&gt;
KR1.1.2&lt;br&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;measurement method 1.1.1&lt;br&gt;
measurement method 1.1.2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;first initiatives to measure&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">To define relevant OKRs you first need to identify areas with significant potential (see How to write great OKRs or Introducing OKRs). Before hosting an OKR workshop reserve time to collect and interpret data. The more long-term the OKRs, the more preparation time makes sense.</summary></entry><entry><title type="html">Keeping code-quality tools up to date</title><link href="https://rknuus.github.io/blog/2020/03/24/keeping-code-quality-tools-up-to-date" rel="alternate" type="text/html" title="Keeping code-quality tools up to date" /><published>2020-03-24T00:00:00+00:00</published><updated>2020-03-24T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/03/24/keeping-code-quality-tools-up-to-date</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/03/24/keeping-code-quality-tools-up-to-date">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code-quality enhancing tools like compiler warnings, static code analyzers, or sanitizers provide invaluable feedback. They work well, when being applied from the beginning on. Retro-fitting them on legacy code yields typically a long list of issues. Fixing them could stall your team for a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Paper%20Stack_2606113.svg&quot; alt=&quot;noun Paper Stack 2606113&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Surely you want to update those tools from time to time. New compilers come with additional warnings, static code analysis rules evolve etc. Suddenly your code is no longer rated being of highest quality. The length of the issue list depends on how often you update those tools. So the problem is that every successful software product inevitable turns into a legacy product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_ruin_3123367.svg&quot; alt=&quot;noun ruin 3123367&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s why &lt;a href=&quot;https://docs.sonarqube.org/7.4/user-guide/fixing-the-water-leak/&quot;&gt;SonarQube&amp;#8217;s &quot;fix the leak&quot;&lt;/a&gt; metaphor is so useful. It means that code written or changed from a baseline date on shall meet highest standards and must not generate any new issues. All code older than the baseline date doesn&amp;#8217;t matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_leak_3194255.svg&quot; alt=&quot;noun leak 3194255&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows to update code-quality enhancing tools &amp;amp; rules without stalling development teams by declaring your code base as &quot;legacy&quot; on every tool &amp;amp; rules update. When combined with a strategy to gradually clean up the mess&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;, this takes the pain from updating tools &amp;amp; rules.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/images/post-images/noun_cleaning_199037.svg&quot; alt=&quot;noun cleaning 199037&quot;&gt;&lt;/span&gt; &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/images/post-images/noun_Syringe_126172.svg&quot; alt=&quot;noun Syringe 126172&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One drawback is that most tools need to process entire files and cannot be applied to change deltas. Changing a single character in a big file can lead to many new issues. In his &lt;a href=&quot;https://youtu.be/JPnN2c2odNY?t=2080&quot;&gt;CppCon 2019 talk&lt;/a&gt; Fred Tingaud sketches a simple algorithm to improve granularity: Apply code-quality enhancing checks before &amp;amp; after a change and only report the delta as new issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. will be covered in the upcoming post
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="quality" /><summary type="html">Code-quality enhancing tools like compiler warnings, static code analyzers, or sanitizers provide invaluable feedback. They work well, when being applied from the beginning on. Retro-fitting them on legacy code yields typically a long list of issues. Fixing them could stall your team for a while.</summary></entry><entry><title type="html">Practical OKR tips</title><link href="https://rknuus.github.io/blog/2020/03/22/practical-okr-tips" rel="alternate" type="text/html" title="Practical OKR tips" /><published>2020-03-22T00:00:00+00:00</published><updated>2020-03-22T00:00:00+00:00</updated><id>https://rknuus.github.io/blog/2020/03/22/practical-okr-tips</id><content type="html" xml:base="https://rknuus.github.io/blog/2020/03/22/practical-okr-tips">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;our-first-attempt&quot;&gt;Our first attempt&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our first attempt to use &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; in my organization was not particularly successful. We defined organization-wide OKRs, then we derived OKRs for sub-organizational structures, and we worked out many individual OKRs. But we stopped there. We didn&amp;#8217;t invest in measuring the &lt;em&gt;Key Results&lt;/em&gt;. We didn&amp;#8217;t make all the OKRs transparent. And we didn&amp;#8217;t discuss them on a regular basis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-we-learned-for-our-second-attempt&quot;&gt;What we learned for our second attempt&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our second attempt is based on several concrete ideas, mainly extracted from  &lt;a href=&quot;#whatmatters&quot;&gt;Measure What Matters&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;start-small&quot;&gt;Start small&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Going full scale while making the first steps with a new tool like &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; is like hosting a dinner party for 50 prominent guests without having cooked for your family a single time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_sprout_445566.svg&quot; alt=&quot;noun sprout 445566&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s why it makes sense to kick-off a Community of Practice (CoP) built of a dozen or so volunteers. Let this CoP experiement with ideas and exercise the application of &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt;. Meet on a regular basis, exchange experiences and build your set of good practices you want to share with the entire organization once you scale up like an &lt;a href=&quot;#create-a-checklist&quot;&gt;OKR checklist&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;nominate-a-shepherd&quot;&gt;Nominate a shepherd&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Defining goals can be easy. Specifying measurements can be trickier. But the real challenge is to follow through, to run the measurements, to review them, and to keep the up to date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_shepherd_1974919.svg&quot; alt=&quot;noun shepherd 1974919&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s why it immensely helps to have someone taking care of nudging everybody to keep timelines and to keep track of measurements. I like to think of the first measurement as the first &lt;em&gt;Initiative&lt;/em&gt;. The shepherd proactively approaches people to share their &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; ideas, provides feedback how to improve OKRs (e.g. to balance quantitative with qualitative &lt;em&gt;Key Results&lt;/em&gt;), and if necessary sanctions laggards.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;create-a-checklist&quot;&gt;Create a checklist&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chances are, your first &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; are overly ambitious. Two reasons for this are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Someone points out that doing a step towards the right direction is already an achievement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Others struggle to think out of the box, which becomes necessity when being ambitious.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another common trap is to define tasks as &lt;em&gt;Key Results&lt;/em&gt;. Sure, a completed task looks like you have achieved a milestone and you have made progress. But typically if you would stop there, there would be no outcome and no value without completing at least one additional task. Tasks are &lt;em&gt;Initiatives&lt;/em&gt; and don&amp;#8217;t work as &lt;em&gt;Key Results&lt;/em&gt; (see section &quot;What Everyone Gets Wrong About Key Results&quot; in &lt;a href=&quot;https://www.perdoo.com/resources/okr-ebook/&quot;&gt;How to write great OKRs&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_Checklist_450368.svg&quot; alt=&quot;noun Checklist 450368&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s why it makes sense to create a checklist and apply it to your OKRs, gradually adapting the checklist to your needs. &lt;a href=&quot;#my-organizations-okr-checklist&quot;&gt;My organization&amp;#8217;s OKR checklist&lt;/a&gt; might provide a starting point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;optimize-transparency-minimize-hurdles&quot;&gt;Optimize transparency, minimize hurdles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transparency trumps. If you want &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; to be discussed by most organization members at least on a weakly basis they need to be easily accessible. And simple to manage. Even though the simplest possible solution to keep track of OKRs is a central spreadsheet, invite the CoP to evaluate different OKR tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/images/post-images/noun_mirror_1579392.svg&quot; alt=&quot;noun mirror 1579392&quot;&gt;&lt;/span&gt; &lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/images/post-images/noun_barrier_901263.svg&quot; alt=&quot;noun barrier 901263&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our tool evaluation criteria were mostly usability: Does the tool provide a good overview of all OKRs and make it simple to link them? How easy is it to enter and update OKRs? Can you import &lt;em&gt;Key Results&lt;/em&gt; measurements from a spreadsheat or update them by API calls?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;celebrate-success&quot;&gt;Celebrate success&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whenever someone makes significant progress this deserves public appreciation. That&amp;#8217;s why it makes sense to test some ideas how to celebrate success before scaling &lt;a href=&quot;../../../2020/01/01/introducing-okrs&quot;&gt;OKRs&lt;/a&gt; to the entire organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock text-center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/post-images/noun_celebrate_2788745.svg&quot; alt=&quot;noun celebrate 2788745&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might even use the opportunity to turn the negative conotation of failure to the positive by celebrating learnings, changing the culture of your organization to embrace experiments, take risks, and continuously learn.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;my-organizations-okr-checklist&quot;&gt;My organization&amp;#8217;s OKR checklist&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our checklist is compiled based on:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.perdoo.com/resources/okr-ebook/&quot;&gt;How to write great OKRs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.whatmatters.com/resources/googles-okr-playbook&quot;&gt;Google&amp;#8217;s OKR Playbook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;objective-checklist&quot;&gt;&lt;em&gt;Objective&lt;/em&gt; checklist&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. &lt;em&gt;Objective&lt;/em&gt; checklist&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Item&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Litmus test&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;committed vs. aspirational&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is it OK to drag O into next year?&lt;br&gt;
Most O&amp;#8217;s should be aspirational&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;directional&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it break out of status quo?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;objective&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is it obvious when goal is achieved?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;aligned&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it support organization mission &amp;amp; vision?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;high impact, &lt;strong&gt;not&lt;/strong&gt; business-as-usual&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is it a substantial step forward?&lt;br&gt;
Think what customers need, &lt;strong&gt;not&lt;/strong&gt; what we can do&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;high value, &lt;strong&gt;not&lt;/strong&gt; nobody cares&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cannot achieve it w/o clear economic value for organization.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;clear motivation&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Would granny understand why?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;inspirational, &lt;strong&gt;not&lt;/strong&gt; timid&lt;br&gt;
&lt;strong&gt;not&lt;/strong&gt; sandbagging (aspirational)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;How would ideal world look in N years w/o most constraints?&lt;br&gt;
Would you put it on your resume?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;understandable &amp;amp; tangible&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Would granny get it?&lt;br&gt;
Is it unambiguous? Just 1 line&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;within circle of influence&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Are you able to do something about it?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;realistic&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is there a chance to make a significant step?&lt;br&gt;
Can someone show a way how it could be possible?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;not&lt;/strong&gt; measurable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Numbers belong into KRs.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;insufficient KRs for O&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;If all KRs score 100% is O perfectly fulfilled?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;time-bound&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it have a start &amp;amp; end date?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;right amount&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1 - 4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;key-result-checklist&quot;&gt;&lt;em&gt;Key Result&lt;/em&gt; checklist&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. &lt;em&gt;Key Result&lt;/em&gt; checklist&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Item&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Litmus test&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;high impact, &lt;strong&gt;not&lt;/strong&gt; business-as-usual&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Is it a substantial step towards Objective?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ambitious&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it make you feel a little uncomfortable?&lt;br&gt;
Is it 30% - 40% above what deems possible?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;measurable &amp;amp; evidence of completion&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes/no (boolean) or countable (number), link to data sources.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;measurement method&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Could granny measure it?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;within circle of influence&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Are you able to do something about it?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;not&lt;/strong&gt; an initiative&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it define outcomes, not activities?&lt;br&gt;
Take view of end-user.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;time-bound&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it have a start &amp;amp; end date?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;right amount&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1 - 5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;initiative-checklist&quot;&gt;&lt;em&gt;Initiative&lt;/em&gt; checklist&lt;/h3&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. &lt;em&gt;Key Result&lt;/em&gt; checklist&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Item&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Litmus test&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;measurable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Yes/no (boolean) or countable (number).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;specific&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Do you know what to do?&lt;br&gt;
&lt;strong&gt;not&lt;/strong&gt; vague. Unambiguous verb (e.g. write, visit, &amp;#8230;&amp;#8203;). Clearly defined scope&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;within circle of influence&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Are you able to do something about it?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;within control&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;No external dependencies.&lt;br&gt;
Full power over accomplishing it.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;time-bound&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Does it have a start &amp;amp; end date?&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;right amount&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1+&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sidebarblock changehistory&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;title&quot;&gt;change history:&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;fix typo and cross-reference OKR introduction, 20-Feb-2021&lt;br&gt;
initial version, 22-Mar-2020&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>rknuus</name></author><category term="agility" /><summary type="html">Our first attempt Our first attempt to use OKRs in my organization was not particularly successful. We defined organization-wide OKRs, then we derived OKRs for sub-organizational structures, and we worked out many individual OKRs. But we stopped there. We didn&amp;#8217;t invest in measuring the Key Results. We didn&amp;#8217;t make all the OKRs transparent. And we didn&amp;#8217;t discuss them on a regular basis.</summary></entry></feed>